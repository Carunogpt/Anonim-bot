import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import database as db
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
FREE_MESSAGE_LIMIT = 5
SUBSCRIBED_MESSAGE_LIMIT = 30

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
class SendMessage(StatesGroup):
    waiting_for_message = State()
    target_user_id = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_subscription_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    button = InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–µ–º–æ)", callback_data="subscribe")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def send_welcome(message: Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    db.add_user_if_not_exists(user_id, username)

    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    unique_link = f"https://t.me/{await bot.get_me()}/?start=msg_{user_id}"

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        f"üíå –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        f"`{unique_link}`\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        parse_mode="Markdown"
    )
    await show_stats(message)


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /stats"""
    await show_stats(message)


async def show_stats(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    stats = db.get_user_stats(user_id)
    if stats:
        messages_received, is_subscribed = stats
        limit = SUBSCRIBED_MESSAGE_LIMIT if is_subscribed else FREE_MESSAGE_LIMIT
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_subscribed else "‚ùå –ù–µ—Ç"

        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_received}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}\n"
            f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {limit}",
            reply_markup=get_subscription_keyboard() if not is_subscribed else None
        )

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(F.text.startswith('/start msg_'))
async def handle_deep_link(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        target_user_id = int(message.text.split('_')[1])
        if target_user_id == message.from_user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        target_user_info = db.get_user_info(target_user_id)
        if not target_user_info:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        messages_received, is_subscribed = target_user_info
        limit = SUBSCRIBED_MESSAGE_LIMIT if is_subscribed else FREE_MESSAGE_LIMIT

        if messages_received >= limit:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(target_user_id=target_user_id)
        await state.set_state(SendMessage.waiting_for_message)

        await message.answer(f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ –≤—ã.")

    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@dp.message(SendMessage.waiting_for_message)
async def process_anonymous_message(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.
    """
    data = await state.get_data()
    target_user_id = data.get('target_user_id')

    if not target_user_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ.")
        await state.clear()
        return

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        db.increment_message_count(target_user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=target_user_id,
            text=f"üíå –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                 f"<i>{message.text}</i>", # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            parse_mode="HTML"
        )
        await message.answer("‚úÖ –í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    finally:
        await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–µ–º–æ) ---

@dp.callback_query(F.data == "subscribe")
async def process_subscription(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
    –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã.
    """
    user_id = callback.from_user.id
    db.activate_subscription(user_id)

    await callback.message.edit_text(
        "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
        f"–í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {SUBSCRIBED_MESSAGE_LIMIT}."
    )
    await callback.answer()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    db.init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
